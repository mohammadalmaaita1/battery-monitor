
// This URL points to your Python Flask backend.
// - If running backend on Raspberry Pi & frontend on local PC: Set NEXT_PUBLIC_FLASK_API_BASE_URL in your .env.local file on your PC to your Pi's IP (e.g., 'http://192.168.1.15:5000').
// - If running both frontend AND backend on local PC (for development): The fallback 'http://localhost:5000' will be used if NEXT_PUBLIC_FLASK_API_BASE_URL is not set.
// - For production deployment: Configure NEXT_PUBLIC_FLASK_API_BASE_URL as an environment variable on your hosting platform for the frontend.
export const FLASK_API_BASE_URL = process.env.NEXT_PUBLIC_FLASK_API_BASE_URL || 'http://192.168.1.11:5000';


// This is the number of cells the FRONTEND expects and will try to display.
export const NUMBER_OF_CELLS = 4;

// Define the min and max voltage for 0% and 100% level display in the battery icon
const MIN_VOLTAGE_FOR_LEVEL_DISPLAY = 3.0; // Typical Li-ion empty for percentage calculation
const MAX_VOLTAGE_FOR_LEVEL_DISPLAY = 4.2; // Typical Li-ion full for percentage calculation

export const DEFAULT_VOLTAGE_THRESHOLDS = {
  CRITICAL_LOW_CUTOFF: 3.2,
  WARNING_LOW_CUTOFF: 3.7,
  NORMAL_MAX_CUTOFF: 4.2,
  WARNING_HIGH_CUTOFF: 4.25,
};
export type VoltageThresholds = typeof DEFAULT_VOLTAGE_THRESHOLDS;

export const CUSTOM_THRESHOLDS_LOCAL_STORAGE_KEY = 'batterySensei_customVoltageThresholds';

// Type definitions
export type CellStatus =
  | 'normal'
  | 'warning-low'
  | 'warning-high'
  | 'critical-error' // Combined for both very low and very high
  | 'unknown';

export interface CellVoltageReading {
  cell: number;
  voltage: number | null; // Allow null for cases where reading might fail or is 0.0
  ain_channel?: string;
}

export interface VoltageHistoryEntry extends CellVoltageReading {
  timestamp: string | null; // Backend might send null if timestamp is invalid
}

export interface AverageVoltagePerCell {
    cell: number;
    avg_voltage: number | null;
}

export interface BackendDashboardStats {
  total_readings: number;
  average_voltages_per_cell: AverageVoltagePerCell[];
  latest_reading_timestamp: string | null;
  timestamp?: string; // Timestamp of when stats were generated by backend
}

// Initial state for cell voltages
// Depends on NUMBER_OF_CELLS and CellVoltageReading
export const initialCellVoltages: CellVoltageReading[] = Array.from({ length: NUMBER_OF_CELLS }, (_, i) => ({
  cell: i + 1,
  voltage: 0.0,
  ain_channel: `AIN${i}`
}));


// Exported functions
export function getAppliedVoltageThresholds(): VoltageThresholds {
  if (typeof window !== 'undefined') {
    try {
      const storedThresholds = localStorage.getItem(CUSTOM_THRESHOLDS_LOCAL_STORAGE_KEY);
      if (storedThresholds) {
        const parsed = JSON.parse(storedThresholds);
        // Basic validation to ensure it has the right keys and types
        if (
          typeof parsed.CRITICAL_LOW_CUTOFF === 'number' &&
          typeof parsed.WARNING_LOW_CUTOFF === 'number' &&
          typeof parsed.NORMAL_MAX_CUTOFF === 'number' &&
          typeof parsed.WARNING_HIGH_CUTOFF === 'number'
        ) {
          return parsed as VoltageThresholds;
        }
      }
    } catch (error) {
      console.warn("Error reading custom thresholds from localStorage:", error);
    }
  }
  return DEFAULT_VOLTAGE_THRESHOLDS;
}

export function getVoltageStatus(voltage: number | null | undefined, customThresholds?: VoltageThresholds): CellStatus {
  const thresholds = customThresholds || getAppliedVoltageThresholds();
  if (voltage === null || voltage === undefined || Number.isNaN(voltage)) return 'unknown';
  if (voltage < thresholds.CRITICAL_LOW_CUTOFF) return 'critical-error';
  if (voltage < thresholds.WARNING_LOW_CUTOFF) return 'warning-low';
  if (voltage <= thresholds.NORMAL_MAX_CUTOFF) return 'normal';
  if (voltage <= thresholds.WARNING_HIGH_CUTOFF) return 'warning-high';
  return 'critical-error';
}

export function getBatteryLevelPercent(voltage: number | null | undefined): number {
  if (voltage === null || voltage === undefined || Number.isNaN(voltage)) return 0;
  const percent =
    ((voltage - MIN_VOLTAGE_FOR_LEVEL_DISPLAY) /
      (MAX_VOLTAGE_FOR_LEVEL_DISPLAY - MIN_VOLTAGE_FOR_LEVEL_DISPLAY)) *
    100;
  return Math.max(0, Math.min(100, percent)); // Clamp between 0 and 100
}

// Style mapping for Tailwind classes and display names
export const statusStyles: Record<CellStatus, { fillClass: string; badgeBackgroundClass: string; textClass: string; borderClass: string; name: string; description: string; }> = {
  'normal': {
    fillClass: 'bg-status-healthy',
    badgeBackgroundClass: 'bg-status-healthy',
    textClass: 'text-status-healthy-foreground',
    borderClass: 'border-status-healthy',
    name: 'Normal',
    description: 'Voltage is optimal.',
  },
  'warning-low': {
    fillClass: 'bg-status-warning-orange',
    badgeBackgroundClass: 'bg-status-warning-orange',
    textClass: 'text-status-warning-orange-foreground',
    borderClass: 'border-status-warning-orange',
    name: 'Warning Low',
    description: 'Voltage is low. Consider charging.',
  },
  'warning-high': {
    fillClass: 'bg-status-warning-orange',
    badgeBackgroundClass: 'bg-status-warning-orange',
    textClass: 'text-status-warning-orange-foreground',
    borderClass: 'border-status-warning-orange',
    name: 'Warning High',
    description: 'Voltage is high. Monitor closely.',
  },
  'critical-error': {
    fillClass: 'bg-status-critical',
    badgeBackgroundClass: 'bg-status-critical',
    textClass: 'text-status-critical-foreground',
    borderClass: 'border-status-critical',
    name: 'Critical',
    description: 'Voltage is at a critical level!', // Generic, can be refined in BatteryCellCard
  },
  'unknown': {
    fillClass: 'bg-status-unknown',
    badgeBackgroundClass: 'bg-status-unknown',
    textClass: 'text-status-unknown-foreground',
    borderClass: 'border-status-unknown',
    name: 'Unknown',
    description: 'Voltage reading unavailable.',
  },
};


// For Theme Provider (Simplified)
export type MyThemeOption = "light" | "dark" | "system";

export interface MyThemeProviderContextState {
  theme: MyThemeOption;
  setTheme: (theme: MyThemeOption) => void;
}

// For Predictive Alerts AI Flow
export interface RecentCellHistory {
  cell: number;
  recentVoltages: (number | null)[]; // Array of recent voltage readings for this cell
}
export type PredictiveAlertInput = {
  allCellsRecentHistory: RecentCellHistory[];
};

export interface PredictiveAlert {
  cell?: number; // Optional: if the alert is specific to a cell
  message: string;
  severity: 'info' | 'warning' | 'critical'; // Example severity levels
}

export type PredictiveAlertOutput = {
  alerts: PredictiveAlert[];
};
